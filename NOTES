postgresql
==========
bbdd: performance-tracker
user: alberto
pass:

PostgreSQL Abrir consola:
# psql postgres

PostgreSQL - Conectar
# psql -U alberto -d performance-tracker





NX - Backend
============
# nx run backend:serve:development

    ERROR no arranca despues de "nx reset"
    1) packages/backend: rm -rf node_modules
    2) packages/backend: npm i
    3) packages/backend: Generar nueva configuracion para Prisma
        1) Migrar el esquema a la base de datos: Aplica las migraciones para que Prisma cree las tablas necesarias en la base de datos PostgreSQL:
        # npx prisma migrate dev --name init
        2) Generar el cliente de Prisma: Después de configurar el esquema, genera el cliente de Prisma con el siguiente comando:
        # npx prisma generate
    4) raiz: nx run backend:serve:development --verbose

CUANDO SE QUEDA BLOQUEADO (PROCESO ZOMBIE)
# kill $(ps aux | grep nx | awk '{print $2}')




PETICIONES
==========

- HEALTH
    curl -X GET http://127.0.0.1:3000/api/v1/health

- ATHLETE - GET ALL
    curl -X GET http://127.0.0.1:3000/api/v1/athletes

- ATHLETE - CREATE
    curl -X POST http://127.0.0.1:3000/api/v1/athletes \
    -H "Content-Type: application/json" \
    -d '{
    "name": "John Doe",
    "age": 28,
    "team": "Alpha Team"
    }'

- ATHLETE - GET ONE
    curl -X GET http://127.0.0.1:3000/api/v1/athletes/{id}

- ATHLETE - UPDATE DATA FROM ONE
    curl -X PUT http://127.0.0.1:3000/api/v1/athletes/{athleteId} \
    -H "Content-Type: application/json" \
    -d '{
    "name": "Nuevo Nombre",
    "age": 25,
    "team": "Nuevo Equipo"
    }'


- ATHLETE - DELETE
    curl -X DELETE http://127.0.0.1:3000/api/v1/athletes/{id}


- ATHLETE - GET ALL METRICS
    curl -X GET http://127.0.0.1:3000/api/v1/athletes/{id}/metrics


- ATHLETE - ADD METRIC
    curl -X POST http://127.0.0.1:3000/api/v1/athletes/{id}/metrics \
    -H "Content-Type: application/json" \
    -d '{
    "metricType": "Speed",
    "value": 27.5,
    "unit": "km/h"
    }'







NX - FRONTEND
=============
# nx run frontend:serve:development

CUANDO SE QUEDA BLOQUEADO (PROCESO ZOMBIE)
# kill $(ps aux | grep nx | awk '{print $2}')

Diseño:
- Diseño: https://merakiui.com/
    - Table: https://merakiui.com/components/application-ui/tables 








DOCKER
======
SETUP
- Limpiar caché de Docker
    # docker builder prune --all
- Para eliminar contenedores y volúmenes antiguos
    # docker-compose down --volumes --remove-orphans
- Construir los contendores
    # docker-compose build 
- Levanta todos los contenedores
    # docker-compose up -d
    (o docker-compose up --build)




El el raiz del proyecto
- Limpiar caché de Docker
    # docker builder prune --all
- Para eliminar contenedores y volúmenes antiguos
    # docker-compose down --volumes --remove-orphans
    (o docker-compose down --rmi all)
- Construir los contendores
    # docker-compose build 
    (o # docker-compose build --no-cache)
- Levanta todos los contenedores
    # docker-compose up -d
    (o # docker-compose up --build -d)
- Verifica que los contenedores estén corriendo
    # docker-compose ps
- Accede al frontend en el navegador
    # http://127.0.0.1:4200


- Logs Contenedor:
    - Frontend: 
        # docker-compose logs frontend


- Consola en contenedor:
# docker exec -it performance-tracker-frontend-1 /bin/sh


- Lanzar comandos al contenedor
    # docker ps
    Miramos el CONTAINER ID del que nos interesa y lanzamos
    # docker exec -it <CONTAINER-ID> /bin/bash
    y dentro lanzamos por ejemplo
    # curl http://127.0.0.1:4200


- Red
    - Ver que redes estan activas
    # docker network ls 
    - comprobar si existe
    # docker network inspect performance-tracker_app-network
    - Crearla (si no existe)
    # docker network create performance-tracker_app-network
    - linkar manualmente los contenedores a esa red
    # docker network connect performance-tracker_app-network performance-tracker-frontend-1
    # docker network connect performance-tracker_app-network performance-tracker-backend-1
    # docker network connect performance-tracker_app-network performance-tracker-database-1
    # docker network connect performance-tracker_app-network performance-tracker-redis-1



- Detener todos los contenedores
# docker-compose down
- Volver a arrancar
# docker-compose up -d





FRONTEND:
http://127.0.0.1:4200/




- Comandos Docker
1) npm run docker:run


