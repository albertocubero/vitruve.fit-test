README
- Nx como global



postgresql
==========
bbdd: performance-tracker
user: alberto
pass:

PostgreSQL Abrir consola:
# psql postgres

PostgreSQL - Conectar
# psql -U alberto -d performance-tracker





NX - Backend
============
# nx run backend:serve:development

    ERROR no arranca despues de "nx reset"
    1) packages/backend: rm -rf node_modules
    2) packages/backend: npm i
    3) packages/backend: Generar nueva configuracion para Prisma
        1) Migrar el esquema a la base de datos: Aplica las migraciones para que Prisma cree las tablas necesarias en la base de datos PostgreSQL:
        # npx prisma migrate dev --name init
        2) Generar el cliente de Prisma: Después de configurar el esquema, genera el cliente de Prisma con el siguiente comando:
        # npx prisma generate
    4) raiz: nx run backend:serve:development --verbose

CUANDO SE QUEDA BLOQUEADO (PROCESO ZOMBIE)
# kill $(ps aux | grep nx | awk '{print $2}')

PENDIENTE
- bbdd: hacer copia seguridad (package script)
- bbdd: restaurar copia seguridad (package script)



PETICIONES
==========

- ATHLETE - GET ALL
    curl -X GET http://localhost:3000/api/v1/athletes

- ATHLETE - CREATE
    curl -X POST http://localhost:3000/api/v1/athletes \
    -H "Content-Type: application/json" \
    -d '{
    "name": "John Doe",
    "age": 28,
    "team": "Alpha Team"
    }'

- ATHLETE - GET ONE
    curl -X GET http://localhost:3000/api/v1/athletes/{id}

- ATHLETE - UPDATE DATA FROM ONE
    curl -X PUT http://localhost:3000/api/v1/athletes/{athleteId} \
    -H "Content-Type: application/json" \
    -d '{
    "name": "Nuevo Nombre",
    "age": 25,
    "team": "Nuevo Equipo"
    }'


- ATHLETE - DELETE
    curl -X DELETE http://localhost:3000/api/v1/athletes/{id}


- ATHLETE - GET ALL METRICS
    curl -X GET http://localhost:3000/api/v1/athletes/{id}/metrics


- ATHLETE - ADD METRIC
    curl -X POST http://localhost:3000/api/v1/athletes/{id}/metrics \
    -H "Content-Type: application/json" \
    -d '{
    "metricType": "Speed",
    "value": 27.5,
    "unit": "km/h"
    }'



Backend
- JWT-based authentication system
- Redis
- Repasar mensajes de error
- Typescript
- Tests





NX - FRONTEND
=============
# nx run frontend:serve:development

CUANDO SE QUEDA BLOQUEADO (PROCESO ZOMBIE)
# kill $(ps aux | grep nx | awk '{print $2}')


PENDIENTE:
- Revisar gestion de errores
- Diseño: https://merakiui.com/
    - Table: https://merakiui.com/components/application-ui/tables 
    - No hay metrics: crear componente